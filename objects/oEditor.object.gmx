<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-128</depth>
  <persistent>0</persistent>
  <parentName>oGUI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vAllowed = true; //TURN THIS OFF WHEN SUBMITTING THE GAME
vMode = false;
vClear = false;

vColor = 0;
vColorTimer = 0;

xx = 0;
yy = 0;

item = 0;
arrSprite[0] = 0;
arrObject[0] = 0;

/*

0: Block
1: Fish
2: Light Seed
3: Enemy 1
4: Enemy 2

*/

arrSprite[ 0 ] = spr_block;
arrSprite[ 1 ] = spr_fish;
arrSprite[ 2 ] = spr_lightSeed;
arrSprite[ 3 ] = spr_enemyPuff;
arrSprite[ 4 ] = tile_debris1;

arrObject[ 0 ] = oBlock;
arrObject[ 1 ] = oFish;
arrObject[ 2 ] = oLightSeed;
arrObject[ 3 ] = oEnemyPuff;
arrObject[ 4 ] = oBGItemDebris;

//Offset Based on Object Origin Location. Items with an origin locked to the 16x16 grid are true.
arrOffset[ 0 ] = false;
for( i = 0; i = array_length_1d( arrObject ); i++ ) {
    arrOffset[ i ] = false;
    }
    
//Offset Assignment
arrOffset[ 0 ] = true; //Blocks
arrOffset[ 4 ] = true; //Debris Tiles
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Color
vColorTimer++;
vColorTimer = vColorTimer%60;
if (vColorTimer &gt;= 30) {
    vColor = global.c_pRed;
    } else {
    vColor = global.c_pWhite;
    }


//
if (mouse_x &gt;= 0) {
    xx = mouse_x - ( (mouse_x)%16);
    } else {
    xx = mouse_x - 16 - ( (mouse_x)%16);
    }
    
if (mouse_y &gt;= 0) {   
    yy = mouse_y - ( (mouse_y)%16);
    } else {
    yy = mouse_y - 16 - ( (mouse_y)%16);
    }
    
item += mouse_wheel_up() - mouse_wheel_down();

item = item%5;
if (item &lt; 0) {
    item = 4;
    }

if (keyboard_check_pressed( ord('Q')) ) {
    vMode = !vMode;
    }

if (vMode) {

    if ( mouse_check_button_pressed( mb_right ) ) {
        if (collision_rectangle( xx + 1, yy + 1, xx + 15, yy + 15, arrObject[ item ], 1, 1)) {
            var obj = (collision_rectangle( xx + 1, yy + 1, xx + 15, yy + 15, arrObject[ item ], 1, 1));
            with (obj) {
                instance_destroy();
                vClear = true;
                }
            }
        }
        
    if (mouse_check_button_pressed( mb_left ) ) &amp;&amp; !(vClear) {
        if (arrOffset[ item ] == true) {
            instance_create( xx, yy, arrObject[ item ] );
            } else {
            instance_create( xx+8, yy+8, arrObject[ item ] );
            }
        }
        
    vClear = false;
        
    }
    
//Disable editor if game isn't allowed
if !(vAllowed) {
    vMode = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vMode) {
    if (arrOffset[ item ] == true) {
        draw_sprite( arrSprite[ item ], 1, xx, yy );
        } else {
        draw_sprite( arrSprite[ item ], 1, xx+8, yy+8 );
        }
        
    draw_set_halign( fa_left );     
    draw_set_colour( global.c_pBlack );
    draw_text( view_xview[0] + 4, view_yview[0] + 15, "EDITOR MODE" );
    draw_text( view_xview[0] + 4, view_yview[0] + view_hview[0] - 29, "EDITOR MODE" );
           
    draw_set_colour( vColor );
    draw_text( view_xview[0] + 3, view_yview[0] + 14, "EDITOR MODE" );
    draw_text( view_xview[0] + 3, view_yview[0] + view_hview[0] - 30, "EDITOR MODE" );
    
    draw_set_halign( fa_right );     
    draw_set_colour( global.c_pBlack );
    draw_text( view_xview[0] + view_wview[0] - 3, view_yview[0] + 15, "EDITOR MODE" );
    draw_text( view_xview[0] + view_wview[0] - 3, view_yview[0] + view_hview[0] - 29, "EDITOR MODE" );
           
    draw_set_colour( vColor );
    draw_text( view_xview[0] + view_wview[0] - 4, view_yview[0] + 14, "EDITOR MODE" );
    draw_text( view_xview[0] + view_wview[0] - 4, view_yview[0] + view_hview[0] - 30, "EDITOR MODE" );
     
    draw_set_halign( fa_left );   
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
