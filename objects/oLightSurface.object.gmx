<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-256</depth>
  <persistent>0</persistent>
  <parentName>oGUI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Surfaces
global.surfLight = surface_create( 480, 270 );
global.surfBypass = surface_create( 480, 270 ); //For displays above the light layer
global.surfLight_d = surface_create( 480, 270 ); //For dark tone
global.surfLight_m = surface_create( 480, 270 ); //For medium tone
global.surfLight_l = surface_create( 480, 270 ); //For light tone

//Variables
vExpand = 0;
vExpandSine = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vExpandSine ++;
if (vExpandSine &gt;= 360) {
    vExpandSine = 0;
    }

vExpand = dsin(vExpandSine)*16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>restore_surfaces();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Clear Shader, Restore Surfaces
shader_reset();
restore_surfaces();

//Draw vignette to surface
/*
surface_set_target( global.surfLight );

draw_set_alpha(1);

draw_set_colour( global.c_pitch );
draw_rectangle(0, 0, view_wview[0], view_hview[0], 0);

draw_set_colour( global.c_dark );
draw_circle( view_wview[0]/2, view_hview[0]/2, 160 + vExpand, 0);

draw_set_colour( global.c_medium );
draw_circle( view_wview[0]/2, view_hview[0]/2, 128 + vExpand, 0);

draw_set_colour( global.c_light );
draw_circle( view_wview[0]/2, view_hview[0]/2, 80 + vExpand, 0);

surface_reset_target();
*/

//Draw all tone surfaces to the light surface
surface_set_target( global.surfLight );

    draw_set_colour( global.c_pitch );
    draw_rectangle(0, 0, view_wview[0], view_hview[0], 0);
    
    draw_surface( global.surfLight_d, 0, 0 );
    draw_surface( global.surfLight_m, 0, 0 );
    draw_surface( global.surfLight_l, 0, 0 );

surface_reset_target();


//Draw light surface
if !( oEditor.vMode ) {
    draw_set_blend_mode(bm_subtract);
    draw_surface( global.surfLight, view_xview[0], view_yview[0] );
    draw_set_blend_mode(bm_normal);
    draw_surface( global.surfBypass, view_xview[0], view_yview[0] );
    }

//Clear light surface
surface_set_target( global.surfLight );
draw_clear_alpha(c_white, 0);
surface_reset_target();

surface_set_target( global.surfBypass );
draw_clear_alpha(c_white, 0);
surface_reset_target();

surface_set_target( global.surfLight_d );
draw_clear_alpha(c_white, 0);
surface_reset_target();

surface_set_target( global.surfLight_m );
draw_clear_alpha(c_white, 0);
surface_reset_target();

surface_set_target( global.surfLight_l );
draw_clear_alpha(c_white, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
