<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variables

//Expansion
vExpand = 0;
vExpandSine = 0;
vExpandRate = 1;
vExpandLimit = 8;

//Range Definitions (to be redefined by child)
rangeBright = 10;
rangeNormal = 80;
rangeDarken = 120;

//Blotting
vBlotRotate = 0;

//
vDrawEnable = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vBlotRotate += 0.2;
vExpandSine += vExpandRate;
if (vExpandSine &gt;= 360) {
    vExpandSine = vExpandSine%360;
    }
    
if (vBlotRotate &gt;= 360) {
    vBlotRotate = 0;
    }

vExpand = dsin(vExpandSine)*vExpandLimit;

if ( point_distance( x, y, oCamFocus.x, oCamFocus.y) &lt; ( 240 + rangeDarken + vExpand ) ) {
    vDrawEnable = true;
    } else {
    vDrawEnable = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);

draw_set_circle_precision( max(16, floor(rangeDarken/5)) );

if (vDrawEnable) {

    //Init Draw
    restore_surfaces();
    
    
    
    
    //Dark Surface
    surface_set_target( global.surfLight_d );
    draw_set_colour( global.c_dark );
    draw_circle( x - view_xview[0], y - view_yview[0], rangeDarken + vExpand, 0);
    surface_reset_target();
    
    //Medium Surface
    surface_set_target( global.surfLight_m );
    draw_set_colour( global.c_medium );
    draw_circle( x - view_xview[0], y - view_yview[0], rangeNormal + vExpand, 0);
    surface_reset_target();
    
    //Light Surface
    surface_set_target( global.surfLight_l );
    draw_set_colour( global.c_light );
    draw_circle( x - view_xview[0], y - view_yview[0], rangeBright + vExpand, 0);
    surface_reset_target();
    
    
    
    
    //Range Outline
    surface_set_target( global.surfRange );
    draw_set_colour( global.c_pWhite);
    draw_circle( x - view_xview[0], y - view_yview[0], rangeDarken + 1 + vExpand, 0);
    surface_reset_target();
    
    //Range Interior
    surface_set_target( global.surfRangeBlack );
    draw_set_colour( global.c_pBlack);
    draw_circle( x - view_xview[0], y - view_yview[0], rangeDarken + vExpand, 0);
    
    //Range Outline Blotting
    draw_set_circle_precision(6);
    if (rangeDarken &gt; 16) {
        
        var blot = (rangeDarken/10) - (( vExpandLimit - vExpand)/10);
        for( i = 0; i &lt; 360; i += 360/32) {
            draw_circle(
                x - view_xview[0] + dsin(i + vBlotRotate)*(rangeDarken + vExpand), 
                y - view_yview[0] + dcos(i + vBlotRotate)*(rangeDarken + vExpand), 
                blot, 0);
            }
        } else {
        
        var blot = (rangeDarken/5) - (( vExpandLimit - vExpand)/5);
        for( i = 0; i &lt; 360; i += 360/16) {
            draw_circle(
                x - view_xview[0] + dsin(i + vBlotRotate)*(rangeDarken + vExpand), 
                y - view_yview[0] + dcos(i + vBlotRotate)*(rangeDarken + vExpand), 
                blot, 0);
            }
        }
    draw_set_circle_precision( max(16, floor(rangeDarken/10)) );   
    surface_reset_target();
    
    /*
    //Range Bright Spot (Center)
    surface_set_target( global.surfRangeBright );
    draw_set_colour( global.c_pBlue);
    draw_circle( x - view_xview[0], y - view_yview[0], rangeBright + vExpand, 0);
    surface_reset_target();
    */
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
