<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask_8</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vLights = 2;
vLightsLimit = 5;
vLightRotate = 0;
vLightSpin = 0;
vLightSprite = 0;

vSink = 0;

hMot = false;
vMot = false;
vSpeedCap = 2;

pointDir = 0;

vSprite = spr_amoeba;

//Expansion
vExpand = 0;
vExpandSine = 0;
vExpandRate = 2;
vExpandLimit = 8;

instance_create( x, y, oPlayerLight );

//Collision Mask
msk = 4;

//Attack/Throw
vAttackCharge = 0;
vAttackRank = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(oEditor.vMode) {
    //Bottom Collision
    if (collision_rectangle( x-1, y + (msk-1), x+1, y + msk + vspeed, oBlock, 1, 1)) {
        var block = collision_rectangle( x-1, y + (msk-1), x+1, y + msk + vspeed, oBlock, 1, 1);
        vspeed = 0;
        y = block.y - msk;
        }
        
    //Top Collision
    if (collision_rectangle( x-1, y - (msk-1), x+1, y - msk + vspeed, oBlock, 1, 1)) {
        var block = collision_rectangle( x-1, y - (msk-1), x+1, y - msk + vspeed, oBlock, 1, 1);
        vspeed = 0;
        y = block.y + msk + 16;
        }
    
    //Right Collision
    if (collision_rectangle( x + (msk-1), y-1, x + msk + hspeed, y+1, oBlock, 1, 1)) {
        var block = collision_rectangle( x + (msk-1), y-1, x + msk + hspeed, y+1, oBlock, 1, 1);
        hspeed = 0;
        x = block.x - msk;
        }
          
    //Left Collision
    if (collision_rectangle( x - (msk-1), y-1, x - msk + hspeed, y+1, oBlock, 1, 1)) {
        var block = collision_rectangle( x - (msk-1), y-1, x - msk + hspeed, y+1, oBlock, 1, 1);
        hspeed = 0;
        x = block.x + msk + 16;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.killFish &gt; 0) {

    if (global.killFish &gt; global.fishCount) {
        global.killFish = global.fishCount;
        }
        
    global.fishCount -= global.killFish;

    with ( oFish ) {
        if (global.killFish == 0) {
            break;
            }
        if (vCapture) {
            global.killFish--;
            instance_destroy();
            }
        }
        
    }
        
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEBUG: spawn fish
//if keyboard_check_pressed( vk_space ) {
//    instance_create(x, y, oFish);
//    }

    //*** EDITOR: Jump Ahead

    if (oEditor.vMode) &amp;&amp; (keyboard_check_pressed( vk_space )) {
        x = mouse_x;
        y = mouse_y;
        }
        
    //***

//Strength
global.strength = 50 + 10*vLights;
    
//Facing
if (hspeed &lt; 0) {
    image_xscale = -1;
    }
    
if (hspeed &gt; 0) {
    image_xscale = 1;
    }
    
//Particle: Light Seed Subimage
if (vLights == vLightsLimit) &amp;&amp; (vSprite != spr_squid) {
    vLightSprite += 0.25;
    } else {
    vLightSprite = 0;
    }

//Particle: Spawn Bubbles
var spawnBubble = random(1000);

if (spawnBubble &gt;= 990) || ( (vMot || hMot) &amp;&amp; spawnBubble &gt;= 950) {
    bub = instance_create( x, y, oParticleBubble );
    bub.hspeed = random(1) - random(1);
    }

//Motion Code
if !( (vSprite == spr_squid) &amp;&amp; ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) ) { //Motion not permitted when spraying
    
    if (global.controlMode == 0) { //Control mode 1
        hMot = keyboard_check(vk_right) + keyboard_check(vk_left);
        vMot = keyboard_check(vk_down) + keyboard_check(vk_up);
        
        hspeed += 0.4*( keyboard_check(vk_right) - keyboard_check(vk_left) );
        vspeed += 0.4*( keyboard_check(vk_down) - keyboard_check(vk_up) );
        }
        
    if (global.controlMode == 1) { //Control mode 2
        hMot = keyboard_check(ord('D')) + keyboard_check(ord('A'));
        vMot = keyboard_check(ord('S')) + keyboard_check(ord('W'));
        
        hspeed += 0.4*( keyboard_check(ord('D')) - keyboard_check(ord('A')) );
        vspeed += 0.4*( keyboard_check(ord('S')) - keyboard_check(ord('W')) );
        
            //*** EDITOR: Increase Accel
      
            if (oEditor.vMode) {
                hspeed += 2*( keyboard_check(ord('D')) - keyboard_check(ord('A')) );
                vspeed += 2*( keyboard_check(ord('S')) - keyboard_check(ord('W')) );
                }
                
            //***
        
        }

    }
if (vSprite == spr_squid) {
    if ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) {
        vSpeedCap = 0;
        } else {
        vSpeedCap = 1;
        }
    } else {
    vSpeedCap = 2;
    }

    //*** EDITOR: Increase Speed  
      
    if (oEditor.vMode) {
        vSpeedCap = 4;
        }
        
    //***
    
if (speed &gt; vSpeedCap) {
    speed = vSpeedCap;
    }

//Slow Down
if (speed &gt; 0) &amp;&amp; !(hMot || vMot) {
    if !( (vSprite == spr_squid) &amp;&amp; ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) ){
        speed -= 0.1;
        
        if (speed &lt;= 0.2) {
            speed = 0;
            }
        
            
        }
        
    //*** EDITOR: Stop Immediately 
      
    if (oEditor.vMode) {
        speed = 0;
        }
        
    //***
        
    }

if ( vspeed == 0 ) {
    y = floor(y);
    }
if ( hspeed == 0 ) {
    x = floor(x);
    }
  
//Sink
vSink++;

if (vMot) || (hMot) || (oEditor.vMode) {
    vSink = -60;
    }
    
if (vSink &gt;= 15) {
    vSink = 0;
    y++;
    }

//Squid: attack
if (vSprite == spr_squid ) { //Throw lights only when in fish mode
    if ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) {
        
        var dir = 0;
        if (global.controlMode == 0) {
            dir = direction + ( random(8) - random(8));
            }
        if (global.controlMode == 1) {
            dir = point_direction( x, y, mouse_x, mouse_y) + ( random(8) - random(8));
            }
            
        var obj = instance_create(x + dsin(dir + 90)*6, y + dcos(dir + 90)*6, oGas);
        obj.speed = 3 + random(2); //5    
        obj.direction = dir;   
        //motion_add( (dir + 180)%360 , 0.05 );
        
        if (!audio_is_playing(snd_ink)) {
            audio_play_sound(snd_ink,2,0);
            }
        
        }
    }
    
//Light Objects
if (vSprite == spr_fish || vSprite == spr_fishAdv ) { //Throw lights only when in fish mode
    if ( keyboard_check_released( ord( 'C' )) || mouse_check_button_released( mb_left ) )
        &amp;&amp; ( vLights &gt; 0 ) {
        
        var obj = instance_create(x, y, oLightSeed);
        
        audio_play_sound(snd_throw,2,0);
        
        obj.speed = 4 + ( vAttackRank*(0.4) ); //5
        if (global.controlMode == 0) {
            obj.direction = direction;
            }
        if (global.controlMode == 1) {
            obj.direction = point_direction( x, y, mouse_x, mouse_y);
            }
        vLights --;
        }
    }
    
if (vLights &gt; vLightsLimit) {
    vLights = vLightsLimit;
    }

//Light Rotation
vLightRotate+=2;
if (vLightRotate &gt;= 360) {
    vLightRotate = vLightRotate%360;
    }
    
vLightSpin+=1;
if (vLightSpin &gt;= 360) {
    vLightSpin = vLightSpin%360;
    }

//Light Range Expansion
vExpandSine += vExpandRate;
if (vExpandSine &gt;= 360) {
    vExpandSine = vExpandSine%360;
    }
    
vExpand = dsin(vExpandSine)*vExpandLimit;


//Attack Charging
if ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) {
    vAttackCharge++;
    } else {
    vAttackCharge = 0;
    }
vAttackRank = floor( vAttackCharge/15 );

if (vAttackRank &gt; 6 ) {
    vAttackRank = 6;
    }

if (vSprite == spr_squid) {
    vAttackCharge = 0;
    }

if ( (vAttackCharge/15) == (vAttackRank) ) &amp;&amp; (vAttackRank != 0){
    if (vAttackRank == 6) {
        audio_play_sound( snd_launchFull, 2, 0);
        } else {
        var snd = audio_play_sound( snd_launchClick, 2, 0);
        audio_sound_pitch(snd, 1 + 0.2*vAttackRank);
        }
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; vLights; i ++ ) {
    draw_sprite( spr_lightSeed, vLightSprite, 
    x + dsin(vLightSpin)*(   ((vExpandLimit*2) + (vExpand/2))*dsin( vLightRotate + (i*360/vLights) )   ), 
    y + (   ((vExpandLimit*2) + (vExpand/2))*dcos( vLightRotate + (i*360/vLights) )   )
    );
    }
    
//draw_sprite_ext(spr_amoeba, 0, x, y, 1 - (vExpandLimit - abs(vExpand))/(4*vExpandLimit), 1 - (vExpandLimit - abs(vExpand))/(4*vExpandLimit), 0, c_white, 1 );
if (vSprite = spr_squid) {
    if ( keyboard_check( ord( 'C' )) || mouse_check_button( mb_left ) ) {
        draw_sprite_ext( vSprite , 0, x + dsin(vLightRotate)*2, y + dsin(vLightRotate + 90)*2, 1, 1, 180 + pointDir, c_white, 1);
        } else {
        draw_sprite_ext( vSprite , 0, x + dsin(vLightRotate)*2, y + dsin(vLightRotate + 90)*2, image_xscale , 1, -sign(image_xscale)*vspeed*12 , c_white, 1);
        }
    } else {
    draw_sprite_ext( vSprite , 0, x + dsin(vLightRotate)*2, y + dsin(vLightRotate + 90)*2, image_xscale, 1, -sign(image_xscale)*vspeed*12, c_white, 1);
    }

for (i = 0; i &lt; vLights; i ++ ) {
    if (i &lt;= vLights/2 ) &amp;&amp; vLightSpin&gt;90 &amp;&amp; vLightSpin&lt;270 {
        draw_sprite( spr_lightSeed, vLightSprite, 
        x + dsin(vLightSpin)*(   ((vExpandLimit*2) + (vExpand/2))*dsin( vLightRotate + (i*360/vLights) )   ), 
        y + (   ((vExpandLimit*2) + (vExpand/2))*dcos( vLightRotate + (i*360/vLights) )   ) );
        }
        
    if (i &gt; vLights/2 ) &amp;&amp; ( vLightSpin&lt;=90 || vLightSpin&gt;=270 ) {
        draw_sprite( spr_lightSeed, vLightSprite, 
        x + dsin(vLightSpin)*(   ((vExpandLimit*2) + (vExpand/2))*dsin( vLightRotate + (i*360/vLights) )   ), 
        y + (   ((vExpandLimit*2) + (vExpand/2))*dcos( vLightRotate + (i*360/vLights) )   ) );
        }
        
    }

//Arrow
if ( global.controlMode == 0 ) {
    pointDir = direction;
    }
    
if ( global.controlMode == 1 ) {
    pointDir = point_direction( x, y, mouse_x, mouse_y);
    }

//ARROW: FISH
if (vSprite == spr_fish) {  

    if (vAttackCharge = 0) {    
        
        draw_sprite_ext( spr_arrow, 3, x + 24*dsin( pointDir + 90 ), y + 24*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 3, x + 32*dsin( pointDir + 90 ), y + 32*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 3, x + 40*dsin( pointDir + 90 ), y + 40*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        
        } else {
        
        draw_sprite_ext( spr_arrow, 0, x + 24*dsin( pointDir + 90 ), y + 24*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 0, x + 32*dsin( pointDir + 90 ), y + 32*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 0, x + 40*dsin( pointDir + 90 ), y + 40*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        
        if (vAttackRank &gt;= 1) {
            draw_sprite_ext( spr_arrow, 0, x + 24*dsin( pointDir + 90 ), y + 24*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        if (vAttackRank &gt;= 3) {
            draw_sprite_ext( spr_arrow, 0, x + 32*dsin( pointDir + 90 ), y + 32*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        if (vAttackRank &gt;= 5) {
            draw_sprite_ext( spr_arrow, 0, x + 40*dsin( pointDir + 90 ), y + 40*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        
        if (vAttackRank &gt;= 2) {
            draw_sprite_ext( spr_arrow, 4 - 2*(vAttackRank == 6), x + 24*dsin( pointDir + 90 ), y + 24*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        if (vAttackRank &gt;= 4) {
            draw_sprite_ext( spr_arrow, 4 - 2*(vAttackRank == 6), x + 32*dsin( pointDir + 90 ), y + 32*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        if (vAttackRank &gt;= 6) {
            draw_sprite_ext( spr_arrow, 4 - 2*(vAttackRank == 6), x + 40*dsin( pointDir + 90 ), y + 40*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
            }
        }
        
    }
    
//ARROW: SQUID
if (vSprite == spr_squid) {  

    if (vAttackCharge = 0) {    
        
        draw_sprite_ext( spr_arrow, 3, x + 32*dsin( pointDir + 90 ), y + 32*dcos( pointDir + 90 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 3, x + 40*dsin( pointDir + 85 ), y + 40*dcos( pointDir + 85 ), 1, 1, pointDir - 135, c_white, 1);
        draw_sprite_ext( spr_arrow, 3, x + 40*dsin( pointDir + 95 ), y + 40*dcos( pointDir + 95 ), 1, 1, pointDir - 135, c_white, 1);
        
        }
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
